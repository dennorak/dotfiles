;;; Watchers
(deflisten workspaces :initial  "[]"   "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_ws :initial  "1"    "bash ~/.config/eww/scripts/get-active-workspace")
(deflisten window     :initial  "..."  "sh ~/.config/eww/scripts/get-window-title")
(deflisten music      :initial  ""     "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")
(deflisten batt_id    :initial  "BAT0" "ls /sys/class/power_supply | grep BAT")
(defpoll   volume     :interval "1s"   "sh ~/.config/eww/scripts/getvol")
(defpoll   time       :interval "1s"   "date '+%H:%M:%S'")
(defpoll   date       :interval "1s"   "date '+%b %d, %Y'")
(defpoll   network    :interval "2s"   "sh ~/.config/eww/scripts/get-network")

;;; Sub Widgets

(defwidget metric [label value onchange show]
  (box :orientation "h"
    :class "metric"
    :space-evenly false
    (box
      :orientation "h"					
      :space-evenly false
      (revealer	:transition "slideright"				
        :reveal show
        :duration "250ms"
        ; (scale :min 0
        ;   :max 101
        ;   :active {onchange != ""}
        ;   :value value
        ;   :onchange onchange

        (overlay
          (circular-progress
            :value value
            :start-at 0
            :thickness 10
          )
          (circular-progress
            :value 100
            :start-at 100
            :thickness 8
            :class "inner-circle"
          )
        )
))
(box :class "label" label)
))


(defwidget net []
  (box :class "net" :vexpand "false" :hexpand "false" 
          (circular-progress
              :value "${network.strength}"
              :class "netbar"
              :style "color: ${network.strength > 66 ? "cyan" : network.strength > 33 ? "yellow" : network.strength > 0 ? "purple" : "red"};"
              :thickness 4
          (button 
              :limit-width 2
              :tooltip "${network.connected ? "${network.address} - ${network.name} (${network.strength}%)" : "No Network"}"
              :show_truncated false
              :onclick ""
              :wrap false
              :style "color: black"
              " "))
            
          ))

(defwidget bat []
  (box :class "bat"
    (button
      :style "font-size: larger; color: ${EWW_BATTERY[batt_id].status == "Charging" ? "green" : EWW_BATTERY[batt_id].capacity > 75 ? "white" : EWW_BATTERY[batt_id].capacity > 50 ? "yellow" : EWW_BATTERY[batt_id].capacity > 25 ? "orange" : EWW_BATTERY[batt_id].capacity > 15 ? "red" : "red"}"
      :tooltip "${EWW_BATTERY[batt_id].capacity}% (${EWW_BATTERY[batt_id].status})"
      :onclick ""
      "${EWW_BATTERY[batt_id].capacity > 75 ? " " : EWW_BATTERY[batt_id].capacity > 50 ? " " : EWW_BATTERY[batt_id].capacity > 25 ? " " : EWW_BATTERY[batt_id].capacity > 15 ? " " : " "}"
    )
))

(defwidget vol[]
  (box :orientation "h"
    :class "vol"
    :space-evenly false
      (eventbox
      :onhover "eww update show_vol=true"	
      :onhoverlost "eww update show_vol=false" 
      :orientation "v"
      (box
        :orientation "h"					
        :space-evenly false
        (revealer	:transition "slideleft"				
          :reveal show_vol
          :duration "250ms"
          (box :class "metric"
          (scale :min 0
            :max 101
            :active true
            :value volume
            :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%"
          ))
        )
        (button
          :onclick "pactl set-sink-mute @DEFAULT_SINK@ toggle"
          :tooltip "${volume}%"
          :style "font-size: larger; color: ${volume == 0 ? "red" : "white"};"
          "${volume > 66 ? "󰕾 " : volume > 33 ? "󰖀 " : volume > 0 ? "󰕿 " : "󰝟 "}"
        )
      )
)))
(defvar show_vol false)

;;; Main Widgets

(defwidget workspaces []
  (box :space-evenly true :halign "start" :spacing 10 :class "workspaces"
    (label :text "${current_ws}" :visible false)
    (for workspace in workspaces
      (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
        (box :class "workspace-entry"
          (label :text "${workspace.id == current_ws ? " " : workspace.windows > 0 ? " " : " " }")
)))))

(defwidget center []
  (box :class "center"
    :orientation "h"
    :space-evenly true
    :halign "center"
	      (box
          :orientation "h"					
				  :space-evenly true

          (revealer	:transition "crossfade"				
				    :reveal expand_center
				    :duration "250ms"
            (label
              :text " ${window}"
              :limit-width 30
          ))

          (eventbox
            :onhover "eww update expand_center=true"	
            :onhoverlost "eww update expand_center=false" 
          "${time}"
          )
	        (revealer	:transition "crossfade"				
				    :reveal expand_center			 
				    :duration "550ms"
            "🎵 ${music}"
))))
(defvar expand_center false)


(defwidget tray []
  (box
    :space-evenly false
    :halign "end"
    :class "tray"
    :spacing 15

    (systray :icon-size 20)

    (vol)
    (net)
    (bat)
    (label :text date)
))
(defvar show_disk false)


;;; Bar

(defwidget bar []
  (centerbox :orientation "h"
  (workspaces)
  (center)
  (tray)
))

;;; Window

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "90%"
    :height "1%"
    :anchor "top center"
  )
  :exclusive true
  (bar)
)