;;; Watchers
(deflisten workspaces :initial  "[]"  "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_ws :initial  "1"   "bash ~/.config/eww/scripts/get-active-workspace")
(deflisten window     :initial  "..." "sh ~/.config/eww/scripts/get-window-title")
(deflisten music      :initial  ""    "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")
(defpoll   volume     :interval "1s"  "sh ~/.config/eww/scripts/getvol")
(defpoll   time       :interval "1s"  "date '+%H:%M:%S'")
(defpoll   date       :interval "1s"  "date '+%b %d, %Y'")

;;; Sub Widgets

(defwidget metric [label value onchange show]
  (box :orientation "h"
    :class "metric"
    :space-evenly false
    (box :class "label" label)
    (box
      :orientation "h"					
      :space-evenly false
      (revealer	:transition "slideleft"				
        :reveal show
        :duration "250ms"
        (scale :min 0
          :max 101
          :active {onchange != ""}
          :value value
          :onchange onchange
)))))

;;; Main Widgets

(defwidget workspaces []
  (box :space-evenly true :halign "start" :spacing 10 :class "workspaces"
    (label :text "${current_ws}" :visible false)
    (for workspace in workspaces
      (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
        (box :class "workspace-entry"
          (label :text "${workspace.id == current_ws ? "●" : workspace.windows > 0 ? "○" : "◌" }")
)))))

(defwidget center []
  (box :class "center"
    :orientation "h"
    :space-evenly true
    :halign "center"
	      (box
          :orientation "h"					
				  :space-evenly true

          (revealer	:transition "crossfade"				
				    :reveal expand_center
				    :duration "250ms"
            "🗔 ${window}"
          )

          (eventbox
            :onhover "eww update expand_center=true"	
            :onhoverlost "eww update expand_center=false" 
          "${time}"
          )
	        (revealer	:transition "crossfade"				
				    :reveal expand_center			 
				    :duration "550ms"
            "🎵 ${music}"
))))
(defvar expand_center false)


(defwidget tray []
  (box
    :space-evenly false
    :halign "end"

    (eventbox
      :onhover "eww update show_disk=true"	
      :onhoverlost "eww update show_disk=false" 
      (metric :label "💾"
        :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
      :onchange "" :show show_disk)
    )
    date
))
(defvar show_disk false)


;;; Bar

(defwidget bar []
  (centerbox :orientation "h"
  (workspaces)
  (center)
  (tray)
))

;;; Window

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "90%"
    :height "1%"
    :anchor "top center"
  )
  :exclusive true
  (bar)
)